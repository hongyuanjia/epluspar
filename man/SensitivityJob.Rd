% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sensitivity.R
\docType{class}
\name{SensitivityJob}
\alias{SensitivityJob}
\title{Conduct Sensitivity Analysis for An EnergyPlus Model}
\description{
\code{sensi_job()} takes an IDF and EPW as input and returns a \code{SensitivityJob},
which provides a prototype of conducting sensitivity analysis of EnergyPlus
simulations using \link[sensitivity:morris]{Morris} method.
}
\details{
\code{SensitivityJob} inherits from \link[eplusr:ParametricJob]{eplusr::ParametricJob} class, which means
that all methods provided by \link[eplusr:ParametricJob]{eplusr::ParametricJob} class are also available
for \code{SensitivityJob} class.

The basic workflow is basically:
\enumerate{
\item Adding parameters for sensitivity analysis  using
\href{../../epluspar/html/SensitivityJob#method-param}{\code{$param()}}
or
\href{../../epluspar/html/SensitivityJob#method-apply_measure}{\code{$apply_measure()}}.
\item Check parameter sampled values and generated parametric models using
\href{../../epluspar/html/SensitivityJob#method-samples}{\code{$samples()}}
and
\href{../../epluspar/html/SensitivityJob#method-models}{\code{$models()}},
respectively.
\item Run EnergyPlus simulations in parallel using
\href{../../epluspar/html/SensitivityJob#method-run}{\code{$run()}},
\item Gather EnergyPlus simulated data using
\link[eplusr:EplusGroupJob]{$report_data()} or
\link[eplus:EplusGroupJob]{$tabular_data()}.
\item Evaluate parameter sensitivity using
\href{../../epluspar/html/SensitivityJob#method-evaluate}{\code{$evaluate()}}.
}
}
\examples{

## ------------------------------------------------
## Method `SensitivityJob$param`
## ------------------------------------------------

\dontrun{
sensi$param(
    `Supply Fan 1` = list(Fan_Total_Efficiency = c(min = 0.1, max = 1.0, levels = 5)),
    Material := list(Thickness = c(0.01, 1, 5), Conductivity = c(0.1, 0.6, 10))
)
}


## ------------------------------------------------
## Method `SensitivityJob$apply_measure`
## ------------------------------------------------

\dontrun{
# set sensitivity parameters using $apply_measure()
# (a) first define a "measure"
measure <- function (idf, efficiency, thickness, conducitivy) {
    idf$set(
        `Supply Fan 1` = list(Fan_Total_Efficiency = efficiency),
        Material := list(Thickness = thickness, Conductivity = conducivity)
    )
    idf
}
# (b) then apply that measure with parameter space definitions as
# function arguments
sensi$apply_measure(measure,
    efficiency = c(min = 0.1, max = 1.0, levels = 5),
    thickness = c(0.01, 1, 5), conductivity = c(0.1, 0.6, 10)
)
}


## ------------------------------------------------
## Method `SensitivityJob$samples`
## ------------------------------------------------

\dontrun{
sensi$samples()
}


## ------------------------------------------------
## Method `SensitivityJob$evaluate`
## ------------------------------------------------

\dontrun{
# run parametric simulations
sensi$run(wait = TRUE)

# status now includes a data.table with detailed information on each simulation
sensi$status()

# print simulation errors
sensi$errors()

# extract a target simulation output value for each case to evaluate the
# sensitivity results
eng <- sen$tabular_data(table_name = "site and source energy",
    column_name = "energy per total building area",
    row_name = "total site energy")[, as.numeric(value)]
(result <- sensi$evaluate(eng))

# extract sensivitity data
attr(result, "data")

# plot
plot(result)
}

}
\author{
Hongyuan Jia
}
\section{Super classes}{
\code{\link[eplusr:EplusGroupJob]{eplusr::EplusGroupJob}} -> \code{\link[eplusr:ParametricJob]{eplusr::ParametricJob}} -> \code{SensitivityJob}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-param}{\code{SensitivityJob$param()}}
\item \href{#method-apply_measure}{\code{SensitivityJob$apply_measure()}}
\item \href{#method-samples}{\code{SensitivityJob$samples()}}
\item \href{#method-evaluate}{\code{SensitivityJob$evaluate()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="errors">}\href{../../eplusr/html/EplusGroupJob.html#method-errors}{\code{eplusr::EplusGroupJob$errors()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="kill">}\href{../../eplusr/html/EplusGroupJob.html#method-kill}{\code{eplusr::EplusGroupJob$kill()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="list_table">}\href{../../eplusr/html/EplusGroupJob.html#method-list_table}{\code{eplusr::EplusGroupJob$list_table()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="locate_output">}\href{../../eplusr/html/EplusGroupJob.html#method-locate_output}{\code{eplusr::EplusGroupJob$locate_output()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="output_dir">}\href{../../eplusr/html/EplusGroupJob.html#method-output_dir}{\code{eplusr::EplusGroupJob$output_dir()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="read_mdd">}\href{../../eplusr/html/EplusGroupJob.html#method-read_mdd}{\code{eplusr::EplusGroupJob$read_mdd()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="read_rdd">}\href{../../eplusr/html/EplusGroupJob.html#method-read_rdd}{\code{eplusr::EplusGroupJob$read_rdd()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="read_table">}\href{../../eplusr/html/EplusGroupJob.html#method-read_table}{\code{eplusr::EplusGroupJob$read_table()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="report_data">}\href{../../eplusr/html/EplusGroupJob.html#method-report_data}{\code{eplusr::EplusGroupJob$report_data()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="report_data_dict">}\href{../../eplusr/html/EplusGroupJob.html#method-report_data_dict}{\code{eplusr::EplusGroupJob$report_data_dict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="status">}\href{../../eplusr/html/EplusGroupJob.html#method-status}{\code{eplusr::EplusGroupJob$status()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="EplusGroupJob" data-id="tabular_data">}\href{../../eplusr/html/EplusGroupJob.html#method-tabular_data}{\code{eplusr::EplusGroupJob$tabular_data()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="initialize">}\href{../../eplusr/html/ParametricJob.html#method-initialize}{\code{eplusr::ParametricJob$initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="models">}\href{../../eplusr/html/ParametricJob.html#method-models}{\code{eplusr::ParametricJob$models()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="print">}\href{../../eplusr/html/ParametricJob.html#method-print}{\code{eplusr::ParametricJob$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="run">}\href{../../eplusr/html/ParametricJob.html#method-run}{\code{eplusr::ParametricJob$run()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="save">}\href{../../eplusr/html/ParametricJob.html#method-save}{\code{eplusr::ParametricJob$save()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="seed">}\href{../../eplusr/html/ParametricJob.html#method-seed}{\code{eplusr::ParametricJob$seed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="version">}\href{../../eplusr/html/ParametricJob.html#method-version}{\code{eplusr::ParametricJob$version()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="eplusr" data-topic="ParametricJob" data-id="weather">}\href{../../eplusr/html/ParametricJob.html#method-weather}{\code{eplusr::ParametricJob$weather()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-param"></a>}}
\subsection{Method \code{param()}}{
Set parameters for sensitivity analysis
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensitivityJob$param(
  ...,
  .names = NULL,
  .r = 12L,
  .grid_jump = 4L,
  .scale = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Lists of paramter definitions. Please see above on the
syntax.}

\item{\code{.names}}{A character vector of the parameter names. If \code{NULL},
the parameter will be named in format \code{theta + number}, where
\code{number} is the index of parameter. Default: \code{NULL}.}

\item{\code{.r}}{An positive integer specifying the number of elementary
effect computed per factor. For details, see
\link[sensitivity:morris]{sensitivity::morris}. Default: \code{12}.}

\item{\code{.grid_jump}}{An integer or a vector of integers specifying the
number of levels that are increased/decreased for computing
the elementary effects. Default: \code{1L}. For details, see
\link[sensitivity:morris]{sensitivity::morris}.}

\item{\code{.scale}}{If \code{TRUE}, the input design of experiments is scaled
after building the design and before computing the elementary
effects so that all factors vary within the range \link{0,1}.
Default: \code{TRUE}. For details, see \link[sensitivity:morris]{sensitivity::morris}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\verb{$param()} takes parameter definitions in list format, which is
similar to \verb{$set()} in \link[eplusr:Idf]{eplusr::Idf} class except that each field is
not assigned with a single value, but a numeric vector of length 3,
indicating the minimum value, maximum value and number of levels of
each parameter.

Similar like the way of modifying object field values in
\code{\link[eplusr:Idf$set]{eplusr::Idf$set()}}, there are 3 different ways of defining a
parameter in epluspar:
\itemize{
\item \code{object = list(field = c(min, max, levels))}: Where \code{object} is a
valid object ID or name. Note object ID should be denoted with two
periods \code{..}, e.g. \code{..10} indicates the object with ID \code{10}, It
will set that specific field in that object as one parameter.
\item \code{.(object, object) := list(field = c(min, max, levels))}: Simimar
like above, but note the use of \code{.()} in the left hand side. You
can put multiple object ID or names in \code{.()}. It will set the field
of all specified objects as one parameter.
\item \code{class := list(field = c(min, max, levels))}: Note the use of \verb{:=}
instead of \code{=}. The main difference is that, unlike \code{=}, the left
hand side of \verb{:=} should be a valid class name in current
\link[eplusr:Idf]{eplusr::Idf}. It will set that field of all objects in specified
class as one parameter.
}

For example, the code block below defines 3 parameters:
\itemize{
\item Field \verb{Fan Total Efficiency} in object named \verb{Supply Fan 1} in class
\code{Fan:VariableVolume} class, with minimum, maximum and number of levels
being 0.1, 1.0 and 5, respectively.
\item Field \code{Thickness} in all objects in class \code{Material}, with minimum, maximum
and number of levels being 0.01, 1.0 and 5, respectively.
\item Field \code{Conductivity} in all objects in class \code{Material}, with minimum,
maximum and number of levels being 0.1, 0.6 and 10, respectively.
}\preformatted{sensi$param(
    `Supply Fan 1` = list(Fan_Total_Efficiency = c(min = 0.1, max = 1.0, levels = 5)),
    Material := list(Thickness = c(0.01, 1, 5), Conductivity = c(0.1, 0.6, 10))
)
}
}

\subsection{Returns}{
The modified \code{SensitivityJob} object itself.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
sensi$param(
    `Supply Fan 1` = list(Fan_Total_Efficiency = c(min = 0.1, max = 1.0, levels = 5)),
    Material := list(Thickness = c(0.01, 1, 5), Conductivity = c(0.1, 0.6, 10))
)
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-apply_measure"></a>}}
\subsection{Method \code{apply_measure()}}{
Set parameters for sensitivity analysis using function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensitivityJob$apply_measure(
  measure,
  ...,
  .r = 12L,
  .grid_jump = 4L,
  .scale = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{measure}}{A function that takes an \link[eplusr:Idf]{eplusr::Idf} and other
arguments as input and returns an \link[eplusr:Idf]{eplusr::Idf} object as
output.}

\item{\code{...}}{Arguments \strong{except first \code{Idf} argument} that are passed
to that \code{measure}.}

\item{\code{.r}}{An positive integer specifying the number of elementary
effect computed per factor. For details, see
\link[sensitivity:morris]{sensitivity::morris}.}

\item{\code{.grid_jump}}{An integer or a vector of integers specifying the
number of levels that are increased/decreased for computing
the elementary effects.  For details, see
\link[sensitivity:morris]{sensitivity::morris}.}

\item{\code{.scale}}{If \code{TRUE}, the input design of experiments is scaled
after building the design and before computing the elementary
effects so that all factors vary within the range \link{0,1}.
Default: \code{TRUE}. For details, see \link[sensitivity:morris]{sensitivity::morris}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\verb{$apply_measure()} works in a similar way as the \verb{$apply_measure} in
\link[eplusr:ParametricJob]{eplusr::ParametricJob} class, with only exception that each argument
supplied in \code{...} should be a numeric vector of length 3, indicating
the minimum, maximum and number of levels of each parameter.

Basically \verb{$apply_measure()} allows to apply a measure to an
\link[eplusr:Idf]{eplusr::Idf}. A measure here is just a function that takes an
\link[eplusr:Idf]{eplusr::Idf} object and other arguments as input, and returns a
modified \link[eplusr:Idf]{eplusr::Idf} object as output.

The names of function parameter will be used as the names of
sensitivity parameter. For example, the equivalent version of
specifying parameters described in
\href{../../epluspar/html/SensitivityJob.html#method-param}{\code{$param()}}
using \verb{$apply_measure()} can be:\preformatted{# set sensitivity parameters using $apply_measure()
# (a) first define a "measure"
measure <- function (idf, efficiency, thickness, conducitivy) \{
    idf$set(
        `Supply Fan 1` = list(Fan_Total_Efficiency = efficiency),
        Material := list(Thickness = thickness, Conductivity = conducivity)
    )
    idf
\}
# (b) then apply that measure with parameter space definitions as
# function arguments
sensi$apply_measure(measure,
    efficiency = c(min = 0.1, max = 1.0, levels = 5),
    thickness = c(0.01, 1, 5), conductivity = c(0.1, 0.6, 10)
)
}
}

\subsection{Returns}{
The modified \code{SensitivityJob} object itself.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# set sensitivity parameters using $apply_measure()
# (a) first define a "measure"
measure <- function (idf, efficiency, thickness, conducitivy) {
    idf$set(
        `Supply Fan 1` = list(Fan_Total_Efficiency = efficiency),
        Material := list(Thickness = thickness, Conductivity = conducivity)
    )
    idf
}
# (b) then apply that measure with parameter space definitions as
# function arguments
sensi$apply_measure(measure,
    efficiency = c(min = 0.1, max = 1.0, levels = 5),
    thickness = c(0.01, 1, 5), conductivity = c(0.1, 0.6, 10)
)
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-samples"></a>}}
\subsection{Method \code{samples()}}{
Get sampled parameter values
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensitivityJob$samples()}\if{html}{\out{</div>}}
}

\subsection{Details}{
\verb{$samples()} returns a \code{\link[data.table:data.table]{data.table::data.table()}} which contains the
sampled value for each parameter using \link[sensitivity:morris]{Morris}
method. The returned data.table has \code{1 + n} columns, where \code{n} is the
parameter number, while \code{1} indicates an extra column named \code{case}
giving the index of each sample.
}

\subsection{Returns}{
A \code{\link[data.table:data.table]{data.table::data.table()}}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
sensi$samples()
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-evaluate"></a>}}
\subsection{Method \code{evaluate()}}{
Evaluate sensitivity
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SensitivityJob$evaluate(results)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{results}}{A numeric vector. Usually the output of parametric
simulations extracted using
\link[eplusr:EplusGroupJob]{$report_data()} or
\link[eplusr:EplusGroupJob]{$tabular_data()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\verb{$evaluate()} takes a numeric vector with the same length as total
sample number and returns the a \code{\link[sensitivity:morris]{sensitivity::morris()}} object. The
statistics of interest (mu, mu* and sigma) are stored as an attribute
named \code{data} and can be retrieved using \code{atrr(sensi$evaluate(), "data")}.
}

\subsection{Returns}{
a \code{\link[sensitivity:morris]{sensitivity::morris()}} object with an extra \code{data}
attribute.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
# run parametric simulations
sensi$run(wait = TRUE)

# status now includes a data.table with detailed information on each simulation
sensi$status()

# print simulation errors
sensi$errors()

# extract a target simulation output value for each case to evaluate the
# sensitivity results
eng <- sen$tabular_data(table_name = "site and source energy",
    column_name = "energy per total building area",
    row_name = "total site energy")[, as.numeric(value)]
(result <- sensi$evaluate(eng))

# extract sensivitity data
attr(result, "data")

# plot
plot(result)
}

}
\if{html}{\out{</div>}}

}

}
}
