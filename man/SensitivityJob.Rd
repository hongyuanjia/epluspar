% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sensitivity.R
\docType{class}
\name{SensitivityJob}
\alias{SensitivityJob}
\title{Conduct Sensitivity Analysis for An EnergyPlus Model}
\description{
\code{sensi_job()} takes an IDF and EPW as input and returns a \code{SensitivityJob},
which provides a prototype of conducting sensitivity analysis of EnergyPlus
simulations using \link[sensitivity:morris]{Morris} method.
}
\details{
\code{SensitivityJob} inherits from \code{\link[eplusr:param_job]{ParametricJob}} class,
which means that all methods provided by
\code{\link[eplusr:param_job]{ParametricJob}} class are also available for
\code{SensitivityJob} class.
}
\section{Usage}{
\preformatted{sensi <- sensi_job(idf, epw)
sensi$version()
sensi$seed()
sensi$weather()
sensi$param(..., .names = NULL, .r = 12L, .grid_jump = 4L)
sensi$apply_measure(measure, ..., .r = 12L, .grid_jump = 4L)
sensi$samples()
sensi$evaluate(results)
sensi$models()
sensi$save(dir = NULL, separate = TRUE, copy_external = FALSE)
sensi$run(dir = NULL, wait = TRUE, force = FALSE, copy_external = FALSE, echo = wait)
sensi$kill()
sensi$status()
sensi$errors(info = FALSE)
sensi$output_dir(which = NULL)
sensi$locate_output(which = NULL, suffix = ".err", strict = TRUE)
sensi$report_data_dict(which = NULL)
sensi$report_data(which = NULL, key_value = NULL, name = NULL, year = NULL, tz = "UTC",
                  case = "auto", all = FALSE, wide = FALSE, period = NULL, month = NULL,
                  day = NULL, hour = NULL, minute = NULL, interval = NULL,
                  simulation_days = NULL, day_type = NULL, environment_name = NULL)
sensi$tabular_data(which, report_name = NULL, report_for = NULL, table_name = NULL,
                   column_name = NULL, row_name = NULL)
sensi$print()
}
}

\section{Create}{
\preformatted{sensi <- sensi_job(idf, epw)
}

\strong{Arguments}
\itemize{
\item \code{idf}: Path to EnergyPlus IDF file or an \code{Idf} object.
\item \code{epw}: Path to EnergyPlus EPW file or an \code{Epw} object. \code{epw} can also be
\code{NULL} which will force design-day-only simulation when
\code{\link[=ParametricJob]{$run()}} method is called. Note this needs at least one
\code{Sizing:DesignDay} object exists in the \link{Idf}.
}
}

\section{Set Parameters}{
\preformatted{sensi$param(..., .names = NULL, .r = 12L, .grid_jump = 4L)
sensi$apply_measure(measure, ..., .r = 12L, .grid_jump = 4L)
sensi$samples()
sensi$models()
sensi$evaluate(results)
}

There are 2 ways to set sensitivity parameters in \code{SensitivityJob} class,
i.e. \code{$param()} and \code{$apply_measure()}.

\code{$param()} takes parameter definitions in list format, which is similar to
\code{$set()} in \link[eplusr:Idf]{eplusr::Idf} class except that each field is not assigned with a
single value, but a numeric vector of length 3, indicating the minimum,
maximum and number of levels of the parameter. Every list in \code{$param()}
should be named with a valid object name. Object ID can also be used but have
to be combined with prevailing two periods \code{..}, e.g. \code{..10} indicates the
object with ID \code{10}. There is a special syntax \code{class := list(field = value)}
in \code{$param()}. Note the use of \code{:=} instead of \code{=}. The main difference is
that, unlike \code{=}, the left hand side of \code{:=} should be a valid class name in
current \code{Idf} object.  It will set the field of all objects in specified
class to specified value.

For example, the code block below defines 3 parameters:
\itemize{
\item Field \code{Fan Total Efficiency} in object named \code{Supply Fan 1} in class
\code{Fan:VariableVolume} class, with minimum, maximum and number of levels
being 0.1, 1.0 and 5, respectively.
\item Field \code{Thickness} in all objects in class \code{Material}, with minimum, maximum
and number of levels being 0.01, 1.0 and 5, respectively.
\item Field \code{Conductivity} in all objects in class \code{Material}, with minimum,
maximum and number of levels being 0.1, 0.6 and 10, respectively.
}\preformatted{sensi$param(
    `Supply Fan 1` = list(Fan_Total_Efficiency = c(min = 0.1, max = 1.0, levels = 5)),
    Material := list(Thickness = c(0.01, 1, 5), Conductivity = c(0.1, 0.6, 10))
)
}

\strong{Arguments}
\itemize{
\item \code{...}: Lists of paramter definitions. Each list should be named with a valid
object name or a valid object ID denoted in style \code{..1}, \code{..2} and etc. For
specifying the fields for all objects in a class, the class name instead of
the object name should be used, and a special notation \code{:=} should be used
instead of \code{=}, e.g. \code{class := list(field = value)}.
\item \code{.r}: An positive integer specifying the number of elementary effect
computed per factor. For details, see \link[sensitivity:morris]{sensitivity::morris}. Default: \code{12}.
\item \code{.grid_jump} : An integer or a vector of integers specifying the number of
levels that are increased/decreased for computing the elementary effects.
Default: \code{1L}. For details, see \link[sensitivity:morris]{sensitivity::morris}.
\item \code{.names}: A character vector of the parameter names. If \code{NULL},
the parameter will be named in format \code{theta + number}. Default: \code{NULL}.
}

\code{$apply_measure()} works in a similar way as the \code{$apply_measure} in
\link[eplusr:ParametricJob]{eplusr::ParametricJob} class, with only exception that each argument
supplied in \code{...} should be a numeric vector of length 3, indicating the
minimum, maximum and number of levels of the parameter.
Basically \code{$apply_measure()} allows to apply a measure to an \link{Idf}.
A measure here is just a function that takes an \link{Idf} object and other
arguments as input, and returns a modified \link{Idf} object as output. The names
of function parameter will be used as the names of sensitivity parameter. For
example, the equivalent version of specifying parameters described above
using \code{$apply_measure()} can be:\preformatted{measure <- function (idf, efficiency, thickness, conducitivy) {
    idf$set(
        `Supply Fan 1` = list(Fan_Total_Efficiency = efficiency),
        Material := list(Thickness = thickness, Conductivity = conducivity)
    )

    idf
}

sensi$apply_measure(measure,
    efficiency = c(min = 0.1, max = 1.0, levels = 5),
    thickness = c(0.01, 1, 5), conductivity = c(0.1, 0.6, 10)
)
}

\strong{Arguments}
\itemize{
\item \code{measure}: A function that takes an \code{Idf} and other arguments as input and
returns an \code{Idf} object as output.
\item \code{...}: Arguments \strong{except first \code{Idf} argument} that are passed to that
\code{measure}.
\item \code{.r}: An positive integer specifying the number of elementary effect
computed per factor. For details, see \link[sensitivity:morris]{sensitivity::morris}.
\item \code{.grid_jump} : An integer or a vector of integers specifying the number of
levels that are increased/decreased for computing the elementary effects.
For details, see \link[sensitivity:morris]{sensitivity::morris}.
}

All models created using \code{$param()} and \code{$apply_measure()} will be named in
the same pattern, i.e. \code{Case_ParameterName(ParamterValue)...}. Note that
paramter names will be abbreviated using \code{\link[=abbreviate]{abbreviate()}} with \code{minlength}
being \code{5L} and \code{use.classes} being \code{TRUE}. If samples contain duplications,
\code{\link[=make.unique]{make.unique()}} will be called to make sure every model has a unique name.

\code{$samples()} returns a \link[data.table:data.table]{data.table} which contains
the sampled value for each parameter using \link[sensitivity:morris]{Morris}
method. The returned data.table has \code{1 + n} columns, where \code{n} is the
parameter number, while \code{1} indicates an extra column named \code{case} giving the
index of each sample.

\code{$models()} returns a list of parametric \link[eplusr:Idf]{Idf} objects created
using sensitivity parameter values genereated using Morris method. This means
that parametric models can only be created after sensitivity parameters have
been set using \code{$param()} or \code{$apply_measure()}.

\code{$evaluate()} takes a numeric vector with the same length as total sample
number and returns the a \code{\link[sensitivity:morris]{sensitivity::morris()}} object. The statistics of
interest (mu, mu* and sigma) are stored as an attribute named \code{data} and can
be retrieved using \code{atrr(sensi$evaluate(), "data")}.
}

\section{Inherited Methods from \code{ParametricJob}}{
\preformatted{sensi$version()
sensi$seed()
sensi$weather()
sensi$save(dir = NULL, separate = TRUE, copy_external = FALSE)
sensi$run(dir = NULL, wait = TRUE, force = FALSE, copy_external = FALSE, echo = wait)
sensi$kill()
sensi$status()
sensi$errors(info = FALSE)
sensi$output_dir(which = NULL)
sensi$locate_output(which = NULL, suffix = ".err", strict = TRUE)
sensi$report_data_dict(which = NULL)
sensi$report_data(which = NULL, key_value = NULL, name = NULL, year = NULL, tz = "UTC",
                  case = "auto", all = FALSE, wide = FALSE, period = NULL, month = NULL,
                  day = NULL, hour = NULL, minute = NULL, interval = NULL,
                  simulation_days = NULL, day_type = NULL, environment_name = NULL)
sensi$tabular_data(which, report_name = NULL, report_for = NULL, table_name = NULL,
                   column_name = NULL, row_name = NULL)
sensi$print()
}

All methods listed above are inherited from eplusr's
\code{\link[eplusr:ParametricJob]{ParametricJob}}. For detailed documentation on each
method, please see \link[eplusr:ParametricJob]{eplusr's documentation}.
}

\examples{
\dontrun{
if (eplusr::is_avail_eplus(8.8)) {
    idf_name <- "5Zone_Transformer.idf"
    epw_name <-  "USA_CA_San.Francisco.Intl.AP.724940_TMY3.epw"

    idf_path <- file.path(eplusr::eplus_config(8.8)$dir, "ExampleFiles", idf_name)
    epw_path <- file.path(eplusr::eplus_config(8.8)$dir, "WeatherData", epw_name)

    # create from local files
    sensi_job(idf_path, epw_path)

    # create from an Idf and an Epw object
    sensi <- sensi_job(read_idf(idf_path), read_epw(epw_path))

    # get the seed model
    sensi$seed()

    # get the weather
    sensi$weather()

    # get status of current job
    sensi$status()

    # set sensitivity parameters using $param()
    sensi$param(
        `Supply Fan 1` = list(Fan_Total_Efficiency = c(min = 0.1, max = 1.0, levels = 5)),
        Material := list(Thickness = c(0.01, 1, 5), Conductivity = c(0.1, 0.6, 10))
    )

    # set sensitivity parameters using $apply_measure()
    # (a) first define a "measure"
    measure <- function (idf, efficiency, thickness, conducitivy) {
        idf$set(
            `Supply Fan 1` = list(Fan_Total_Efficiency = efficiency),
            Material := list(Thickness = thickness, Conductivity = conducivity)
        )
        idf
    }
    # (b) then apply that measure with parameter space definitions as
    # function arguments
    sensi$apply_measure(measure,
        efficiency = c(min = 0.1, max = 1.0, levels = 5),
        thickness = c(0.01, 1, 5), conductivity = c(0.1, 0.6, 10)
    )

    # extract samples
    sensi$samples()

    # extract all models
    sensi$models()

    # save all models with each model in a separate folder
    sensi$save(tempdir())

    # save all parametric models with all models in the same folder
    sensi$save(tempdir(), separate = FALSE)

    # run parametric simulations
    sensi$run(wait = TRUE)

    # run in background
    sensi$run(wait = FALSE)
    # get detailed job status by printing
    print(sensi)

    # status now includes a data.table with detailed information on each simulation
    sensi$status()

    # print simulation errors
    sensi$errors()

    # extract output of all simulations
    sensi$report_data()

    # extract only some simulations
    sensi$report_data(c(1, 3))
    sensi$tabular_data(c(1, 3))
    sensi$report_data(c("rotate_30", "rotate_120"))
    sensi$tabular_data(c("rotate_30", "rotate_120"))

    # get output directory
    sensi$output_dir()
    sensi$output_dir(c(1, 3))

    # get path of specific output file
    sensi$locate_output(c(1, 3), ".csv")

    # extract a target simulation output value for each case to evaluate the
    # sensitivity results
    eng <- sen$tabular_data(table_name = "site and source energy",
        column_name = "energy per total building area",
        row_name = "total site energy")[, as.numeric(value)]
    (result <- sensi$evaluate(eng))

   # extract sensivitity data
   attr(result, "data")

   # plot
   plot(result)
}
}
}
\author{
Hongyuan Jia
}
