% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sensitivity.R
\docType{class}
\name{SensitivityJob}
\alias{SensitivityJob}
\alias{sensi_job}
\title{Conduct Sensitivity Analysis for A EnergyPlus Model}
\usage{
sensi_job(idf, epw)
}
\description{
`sensi_job()` takes an IDF and EPW as input and returns a `SensitivityJob`,
which provides a prototype of conducting sensitivity analysis of EnergyPlus
simulations using [Morris][sensitivity::morris] method.
}
\details{
`SensitivityJob` inherits from [`ParametricJob`][eplusr::param_job()] class,
which means that all methods provided by
[`ParametricJob`][eplusr::param_job()] class are also available for
`SensitivityJob` class.
}
\section{Usage}{

```
sensi <- sensi_job(idf, epw)
sensi$version()
sensi$seed()
sensi$weather()
sensi$param(..., .names = NULL, .r = 12L, .grid_jump = 4L)
sensi$apply_measure(measure, ..., .names = NULL)
sensi$samples()
sensi$evaluate(results)
param$models()
sensi$save(dir = NULL, separate = TRUE, copy_external = FALSE)
sensi$run(dir = NULL, wait = TRUE, force = FALSE, copy_external = FALSE, echo = wait)
sensi$kill()
sensi$status()
sensi$errors(info = FALSE)
sensi$output_dir(which = NULL)
sensi$locate_output(which = NULL, suffix = ".err", strict = TRUE)
sensi$report_data_dict(which = NULL)
sensi$report_data(which = NULL, key_value = NULL, name = NULL, year = NULL, tz = "UTC",
                  case = "auto", all = FALSE, wide = FALSE, period = NULL, month = NULL,
                  day = NULL, hour = NULL, minute = NULL, interval = NULL,
                  simulation_days = NULL, day_type = NULL, environment_name = NULL)
sensi$tabular_data(which, report_name = NULL, report_for = NULL, table_name = NULL,
                   column_name = NULL, row_name = NULL)
sensi$print()
```
}

\section{Create}{

```
sensi <- sensi_job(idf, epw)
```

**Arguments**

* `idf`: Path to EnergyPlus IDF file or an `Idf` object.
* `epw`: Path to EnergyPlus EPW file or an `Epw` object. `epw` can also be
  `NULL` which will force design-day-only simulation when
  [`$run()`][ParametricJob] method is called. Note this needs at least one
  `Sizing:DesignDay` object exists in the [Idf].
}

\section{Set Parameters}{

```
sensi$param(..., .names = NULL, .r = 12L, .grid_jump = 4L)
sensi$apply_measure (measure, ..., .names = NULL, .r = 12L, .grid_jump = 4L)
sensi$samples()
sensi$evaluate(results)
```

There are 2 ways to set sensitivity parameters in `SensitivityJob` class,
i.e. `$param()` and `$apply_measure()`.

`$param()` takes parameter definitions in list format, which is similar to
`$set()` in [eplusr::Idf] class except that each field is not assigned with a
single value, but a numeric vector of length 3, indicating the minimum,
maximum and number of levels of the parameter. Every list in `$param()`
should be named with a valid object name. Object ID can also be used but have
to be combined with prevailing two periods `..`, e.g. `..10` indicates the
object with ID `10`. There is a special syntax `class := list(field = value)`
in `$param()`. Note the use of `:=` instead of `=`. The main difference is
that, unlike `=`, the left hand side of `:=` should be a valid class name in
current `Idf` object.  It will set the field of all objects in specified
class to specified value.

For example, the code block below defines 3 parameters:

* Field `Fan Total Efficiency` in object named `Supply Fan 1` in class
  `Fan:VariableVolume` class, with minimum, maximum and number of levels
  being 0.1, 1.0 and 5, respectively.
* Field `Thickness` in all objects in class `Material`, with minimum, maximum
  and number of levels being 0.01, 1.0 and 5, respectively.
* Field `Conductivity` in all objects in class `Material`, with minimum,
  maximum and number of levels being 0.1, 0.6 and 10, respectively.

```
sensi$param(
    `Supply Fan 1` = list(Fan_Total_Efficiency = c(min = 0.1, max = 1.0, levels = 5)),
    Material := list(Thickness = c(0.01, 1, 5), Conductivity = c(0.1, 0.6, 10))
)
```

**Arguments**

* `...`: Lists of paramter definitions. Each list should be named with a valid
  object name or a valid object ID denoted in style `..1`, `..2` and etc. For
  specifying the fields for all objects in a class, the class name instead of
  the object name should be used, and a special notation `:=` should be used
  instead of `=`, e.g. `class := list(field = value)`.
* `.r`: An positive integer specifying the number of elementary effect
  computed per factor. For details, see [Sensitivity::morris]. Default: `12`.
* `.grid_jump` : An integer or a vector of integers specifying the number of
  levels that are increased/decreased for computing the elementary effects.
  Default: `1L`. For details, see [Sensitivity::morris].
* `.names`: A character vector of the parameter names. If `NULL`,
  the parameter will be named in format `theta + number`. Default: `NULL`.

`$apply_measure()` works in a similar way as the `$apply_measure` in
[eplusr::ParametricJob] class, with only exception that each argument
supplied in `...` should be a numeric vector of length 3, indicating the
minimum, maximum and number of levels of the parameter.
Basically `$apply_measure()` allows to apply a measure to an [Idf].
A measure here is just a function that takes an [Idf] object and other
arguments as input, and returns a modified [Idf] object as output. The names
of function parameter will be used as the names of sensitivity parameter. For
example, the equivalent version of specifying parameters described above
using `$apply_measure()` can be:

```
measure <- function (idf, efficiency, thickness, conducitivy) {
    idf$set(
        `Supply Fan 1` = list(Fan_Total_Efficiency = efficiency),
        Material := list(Thickness = thickness, Conductivity = conducivity)
    )

    idf
}

sensi$apply_measure(measure,
    efficiency = c(min = 0.1, max = 1.0, levels = 5),
    thickness = c(0.01, 1, 5), conductivity = c(0.1, 0.6, 10)
)
```

**Arguments**

* `measure`: A function that takes an `Idf` and other arguments as input and
    returns an `Idf` object as output.
* `...`: Arguments **except first `Idf` argument** that are passed to that
  `measure`.
* `.r`: An positive integer specifying the number of elementary effect
  computed per factor. For details, see [Sensitivity::morris].
* `.grid_jump` : An integer or a vector of integers specifying the number of
  levels that are increased/decreased for computing the elementary effects.
  For details, see [Sensitivity::morris].
* `.names`: A character vector of the parameter names. If `NULL`,
  the parameter names will be the same as function parameters of `measure`.

All models created using `$param()` and `$apply_measure()` will be named in
the same pattern, i.e. `Case_ParameterName(ParamterValue)...`. Note that only
paramter names will be abbreviated using [abbreviate()] with `minlength`
being `5L` and `use.classes` being `TRUE`. If samples contain duplications,
[make.unique()] will be called to make sure every model has a unique name.

`$samples()` returns a [data.table][data.table::data.table()] which contains
the sampled value for each parameter using [Morris][sensitivity::morris]
method. The returned data.table has `1 + n` columns, where `n` is the
parameter number, while `1` indicates an extra column named `case` giving the
index of each sample.

`$evaluate()` takes a numeric vector with the same length as total sample
number and returns the a [sensitivity::morris()] object. The statistics of
interest (mu, mu* and sigma) are stored as an attribute named `data` and can
be retrieved using `atrr(sensi$evaluate(), "data")`.
}

\section{Inherited Methods from `ParametricJob`}{

```
sensi$version()
sensi$seed()
sensi$weather()
param$models()
sensi$save(dir = NULL, separate = TRUE, copy_external = FALSE)
sensi$run(dir = NULL, wait = TRUE, force = FALSE, copy_external = FALSE, echo = wait)
sensi$kill()
sensi$status()
sensi$errors(info = FALSE)
sensi$output_dir(which = NULL)
sensi$locate_output(which = NULL, suffix = ".err", strict = TRUE)
sensi$report_data_dict(which = NULL)
sensi$report_data(which = NULL, key_value = NULL, name = NULL, year = NULL, tz = "UTC",
                  case = "auto", all = FALSE, wide = FALSE, period = NULL, month = NULL,
                  day = NULL, hour = NULL, minute = NULL, interval = NULL,
                  simulation_days = NULL, day_type = NULL, environment_name = NULL)
sensi$tabular_data(which, report_name = NULL, report_for = NULL, table_name = NULL,
                   column_name = NULL, row_name = NULL)
sensi$print()
```

All methods listed above are inherited from eplusr's
[`ParametricJob`][eplusr::param_job()]. For detailed documentation on each
methods, please see [eplusr's documentation][eplusr::ParametricJob].
}

\examples{
\dontrun{
library(eplusr)

if (is_avail_eplus(8.8)) {
    idf_name <- "5Zone_Transformer.idf"
    epw_name <-  "USA_CA_San.Francisco.Intl.AP.724940_TMY3.epw"

    idf_path <- file.path(eplus_config(8.8)$dir, "ExampleFiles", idf_name)
    epw_path <- file.path(eplus_config(8.8)$dir, "WeatherData", epw_name)

    # create from local files
    sensi_job(idf_path, epw_path)

    # create from an Idf and an Epw object
    sensi <- sensi_job(read_idf(idf_path), read_epw(epw_path))

    # get the seed model
    sensi$seed()

    # get the weather
    sensi$weather()

    # get status of current job
    sensi$status()

    # set sensitivity parameters using $param()
    sensi$param(
        `Supply Fan 1` = list(Fan_Total_Efficiency = c(min = 0.1, max = 1.0, levels = 5)),
        Material := list(Thickness = c(0.01, 1, 5), Conductivity = c(0.1, 0.6, 10))
    )

    # set sensitivity parameters using $apply_measure()
    # (a) first define a "measure"
    measure <- function (idf, efficiency, thickness, conducitivy) {
        idf$set(
            `Supply Fan 1` = list(Fan_Total_Efficiency = efficiency),
            Material := list(Thickness = thickness, Conductivity = conducivity)
        )
        idf
    }
    # (b) then apply that measure with parameter space definitions as
    # function arguments
    sensi$apply_measure(measure,
        efficiency = c(min = 0.1, max = 1.0, levels = 5),
        thickness = c(0.01, 1, 5), conductivity = c(0.1, 0.6, 10)
    )

    # extract samples
    sensi$samples()

    # extract all models
    sensi$models()

    # save all models with each model in a separate folder
    sensi$save(tempdir())

    # save all parametric models with all models in the same folder
    sensi$save(tempdir(), separate = FALSE)

    # run parametric simulations
    sensi$run(wait = TRUE)

    # run in background
    sensi$run(wait = FALSE)
    # get detailed job status by printing
    print(sensi)

    # status now includes a data.table with detailed information on each simulation
    sensi$status()

    # print simulation errors
    sensi$errors()

    # extract output of all simulations
    sensi$report_data()

    # extract only some simulations
    sensi$report_data(c(1, 3))
    sensi$tabular_data(c(1, 3))
    sensi$report_data(c("rotate_30", "rotate_120"))
    sensi$tabular_data(c("rotate_30", "rotate_120"))

    # get output directory
    sensi$output_dir()
    sensi$output_dir(c(1, 3))

    # get path of specific output file
    sensi$locate_output(c(1, 3), ".csv")

    # extract a target simulation output value for each case to evaluate the
    # sensitivity results
    eng <- sen$tabular_data(table_name = "site and source energy",
        column_name = "energy per total building area",
        row_name = "total site energy")[, as.numeric(value)]
    (result <- sensi$evaluate(eng))

   # extract sensivitity data
   attr(result, "data")

   # plot
   plot(result)
}
}
}
\author{
Hongyuan Jia
}
