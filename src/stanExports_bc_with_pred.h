// Generated by rstantools.  Do not edit by hand.

/*
    epScan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    epScan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with epstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_bc_with_pred_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bc_with_pred");
    reader.add_event(83, 81, "end", "model_bc_with_pred");
    return reader;
}
#include <stan_meta_header.hpp>
class model_bc_with_pred : public prob_grad {
private:
        int n;
        int m;
        int n_pred;
        int p;
        int q;
        int D;
        matrix_d y;
        matrix_d eta;
        matrix_d xf;
        matrix_d xc;
        matrix_d tc;
        matrix_d x_pred;
        double delta;
        vector_d alpha;
        double sigma;
        int N;
        matrix_d y_eta;
public:
    model_bc_with_pred(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_bc_with_pred(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_bc_with_pred_namespace::model_bc_with_pred";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            check_greater_or_equal(function__, "m", m, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
            n_pred = int(0);
            vals_i__ = context__.vals_i("n_pred");
            pos__ = 0;
            n_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pred", n_pred, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            check_greater_or_equal(function__, "q", q, 1);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];
            check_greater_or_equal(function__, "D", D, 1);
            current_statement_begin__ = 8;
            validate_non_negative_index("y", "n", n);
            validate_non_negative_index("y", "D", D);
            context__.validate_dims("data initialization", "y", "matrix_d", context__.to_vec(n,D));
            y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, D);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_2_max__ = D;
            size_t y_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                    y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("eta", "m", m);
            validate_non_negative_index("eta", "D", D);
            context__.validate_dims("data initialization", "eta", "matrix_d", context__.to_vec(m,D));
            eta = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, D);
            vals_r__ = context__.vals_r("eta");
            pos__ = 0;
            size_t eta_j_2_max__ = D;
            size_t eta_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < eta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                    eta(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("xf", "n", n);
            validate_non_negative_index("xf", "p", p);
            context__.validate_dims("data initialization", "xf", "matrix_d", context__.to_vec(n,p));
            xf = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p);
            vals_r__ = context__.vals_r("xf");
            pos__ = 0;
            size_t xf_j_2_max__ = p;
            size_t xf_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < xf_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xf_j_1_max__; ++j_1__) {
                    xf(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("xc", "m", m);
            validate_non_negative_index("xc", "p", p);
            context__.validate_dims("data initialization", "xc", "matrix_d", context__.to_vec(m,p));
            xc = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, p);
            vals_r__ = context__.vals_r("xc");
            pos__ = 0;
            size_t xc_j_2_max__ = p;
            size_t xc_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < xc_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xc_j_1_max__; ++j_1__) {
                    xc(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("tc", "m", m);
            validate_non_negative_index("tc", "q", q);
            context__.validate_dims("data initialization", "tc", "matrix_d", context__.to_vec(m,q));
            tc = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, q);
            vals_r__ = context__.vals_r("tc");
            pos__ = 0;
            size_t tc_j_2_max__ = q;
            size_t tc_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < tc_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < tc_j_1_max__; ++j_1__) {
                    tc(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("x_pred", "n_pred", n_pred);
            validate_non_negative_index("x_pred", "p", p);
            context__.validate_dims("data initialization", "x_pred", "matrix_d", context__.to_vec(n_pred,p));
            x_pred = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_pred, p);
            vals_r__ = context__.vals_r("x_pred");
            pos__ = 0;
            size_t x_pred_j_2_max__ = p;
            size_t x_pred_j_1_max__ = n_pred;
            for (size_t j_2__ = 0; j_2__ < x_pred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_pred_j_1_max__; ++j_1__) {
                    x_pred(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 19;
            delta = double(0);
            stan::math::fill(delta, DUMMY_VAR__);
            stan::math::assign(delta,1e-9);
            current_statement_begin__ = 21;
            validate_non_negative_index("alpha", "D", D);
            alpha = Eigen::Matrix<double, Eigen::Dynamic, 1>(D);
            stan::math::fill(alpha, DUMMY_VAR__);
            stan::math::assign(alpha,rep_vector(1.0, D));
            current_statement_begin__ = 22;
            sigma = double(0);
            stan::math::fill(sigma, DUMMY_VAR__);
            stan::math::assign(sigma,stan::math::sqrt(0.01));
            current_statement_begin__ = 23;
            N = int(0);
            stan::math::fill(N, std::numeric_limits<int>::min());
            stan::math::assign(N,((n + m) + n_pred));
            current_statement_begin__ = 24;
            validate_non_negative_index("y_eta", "(n + m)", (n + m));
            validate_non_negative_index("y_eta", "D", D);
            y_eta = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((n + m), D);
            stan::math::fill(y_eta, DUMMY_VAR__);
            stan::math::assign(y_eta,append_row(y, eta));
            // execute transformed data statements
            // validate transformed data
            current_statement_begin__ = 21;
            check_greater_or_equal(function__, "alpha", alpha, 0);
            current_statement_begin__ = 22;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 23;
            check_greater_or_equal(function__, "N", N, 1);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 29;
            validate_non_negative_index("tf", "q", q);
            num_params_r__ += q;
            current_statement_begin__ = 30;
            validate_non_negative_index("y_pred", "n_pred", n_pred);
            validate_non_negative_index("y_pred", "D", D);
            num_params_r__ += (n_pred * D);
            current_statement_begin__ = 31;
            validate_non_negative_index("L_Omega", "D", D);
            validate_non_negative_index("L_Omega", "D", D);
            num_params_r__ += ((D * (D - 1)) / 2);
            current_statement_begin__ = 32;
            validate_non_negative_index("tau", "N", N);
            validate_non_negative_index("tau", "D", D);
            num_params_r__ += (N * D);
            current_statement_begin__ = 33;
            num_params_r__ += 1;
            current_statement_begin__ = 34;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_bc_with_pred() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 29;
        if (!(context__.contains_r("tf")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tf missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tf");
        pos__ = 0U;
        validate_non_negative_index("tf", "q", q);
        context__.validate_dims("parameter initialization", "tf", "row_vector_d", context__.to_vec(q));
        Eigen::Matrix<double, 1, Eigen::Dynamic> tf(q);
        size_t tf_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < tf_j_1_max__; ++j_1__) {
            tf(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_lub_unconstrain(0, 1, tf);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tf: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("y_pred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y_pred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y_pred");
        pos__ = 0U;
        validate_non_negative_index("y_pred", "n_pred", n_pred);
        validate_non_negative_index("y_pred", "D", D);
        context__.validate_dims("parameter initialization", "y_pred", "matrix_d", context__.to_vec(n_pred,D));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> y_pred(n_pred, D);
        size_t y_pred_j_2_max__ = D;
        size_t y_pred_j_1_max__ = n_pred;
        for (size_t j_2__ = 0; j_2__ < y_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
                y_pred(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(y_pred);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y_pred: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("L_Omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega");
        pos__ = 0U;
        validate_non_negative_index("L_Omega", "D", D);
        validate_non_negative_index("L_Omega", "D", D);
        context__.validate_dims("parameter initialization", "L_Omega", "matrix_d", context__.to_vec(D,D));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega(D, D);
        size_t L_Omega_j_2_max__ = D;
        size_t L_Omega_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                L_Omega(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "N", N);
        validate_non_negative_index("tau", "D", D);
        context__.validate_dims("parameter initialization", "tau", "matrix_d", context__.to_vec(N,D));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> tau(N, D);
        size_t tau_j_2_max__ = D;
        size_t tau_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < tau_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                tau(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 33;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec());
        double lambda(0);
        lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 29;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> tf;
            (void) tf;  // dummy to suppress unused var warning
            if (jacobian__)
                tf = in__.row_vector_lub_constrain(0, 1, q, lp__);
            else
                tf = in__.row_vector_lub_constrain(0, 1, q);
            current_statement_begin__ = 30;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> y_pred;
            (void) y_pred;  // dummy to suppress unused var warning
            if (jacobian__)
                y_pred = in__.matrix_constrain(n_pred, D, lp__);
            else
                y_pred = in__.matrix_constrain(n_pred, D);
            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega;
            (void) L_Omega;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega = in__.cholesky_factor_corr_constrain(D, lp__);
            else
                L_Omega = in__.cholesky_factor_corr_constrain(D);
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.matrix_constrain(N, D, lp__);
            else
                tau = in__.matrix_constrain(N, D);
            current_statement_begin__ = 33;
            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lub_constrain(0, 1, lp__);
            else
                rho = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 34;
            local_scalar_t__ lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.scalar_lb_constrain(0, lp__);
            else
                lambda = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 39;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,(-(4.0) * stan::math::log(rho)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 39;
            if (stan::math::is_uninitialized(beta)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: beta";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            {
            current_statement_begin__ = 44;
            validate_non_negative_index("f", "N", N);
            validate_non_negative_index("f", "D", D);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> f(N, D);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("xt", "N", N);
            validate_non_negative_index("xt", "(p + q)", (p + q));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> xt(N, (p + q));
            stan::math::initialize(xt, DUMMY_VAR__);
            stan::math::fill(xt, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("K", "N", N);
            validate_non_negative_index("K", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(N, N);
            stan::math::initialize(K, DUMMY_VAR__);
            stan::math::fill(K, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("L", "N", N);
            validate_non_negative_index("L", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L(N, N);
            stan::math::initialize(L, DUMMY_VAR__);
            stan::math::fill(L, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("z", "N", N);
            validate_non_negative_index("z", "D", D);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z(N, D);
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z, DUMMY_VAR__);
            current_statement_begin__ = 50;
            stan::math::assign(z, append_row(y_eta, y_pred));
            current_statement_begin__ = 53;
            stan::model::assign(xt, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), 
                        xf, 
                        "assigning variable xt");
            current_statement_begin__ = 54;
            stan::model::assign(xt, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_min_max((p + 1), (p + q)), stan::model::nil_index_list())), 
                        rep_matrix(tf, n), 
                        "assigning variable xt");
            current_statement_begin__ = 55;
            stan::model::assign(xt, 
                        stan::model::cons_list(stan::model::index_min_max((n + 1), (n + m)), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), 
                        xc, 
                        "assigning variable xt");
            current_statement_begin__ = 56;
            stan::model::assign(xt, 
                        stan::model::cons_list(stan::model::index_min_max((n + 1), (n + m)), stan::model::cons_list(stan::model::index_min_max((p + 1), (p + q)), stan::model::nil_index_list())), 
                        tc, 
                        "assigning variable xt");
            current_statement_begin__ = 57;
            stan::model::assign(xt, 
                        stan::model::cons_list(stan::model::index_min_max(((n + m) + 1), N), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), 
                        x_pred, 
                        "assigning variable xt");
            current_statement_begin__ = 58;
            stan::model::assign(xt, 
                        stan::model::cons_list(stan::model::index_min_max(((n + m) + 1), N), stan::model::cons_list(stan::model::index_min_max((p + 1), (p + q)), stan::model::nil_index_list())), 
                        rep_matrix(tf, n_pred), 
                        "assigning variable xt");
            current_statement_begin__ = 61;
            for (int i = 1; i <= (N - 1); ++i) {
                current_statement_begin__ = 62;
                stan::model::assign(K, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            ((1 / lambda) + delta), 
                            "assigning variable K");
                current_statement_begin__ = 63;
                for (int j = (i + 1); j <= N; ++j) {
                    current_statement_begin__ = 64;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                stan::math::exp(-(dot_self(multiply(subtract(get_base1(xt, i, "xt", 1), get_base1(xt, j, "xt", 1)), beta)))), 
                                "assigning variable K");
                    current_statement_begin__ = 65;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(K, i, j, "K", 1) / lambda), 
                                "assigning variable K");
                    current_statement_begin__ = 66;
                    stan::model::assign(K, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(K, i, j, "K", 1), 
                                "assigning variable K");
                }
            }
            current_statement_begin__ = 69;
            stan::model::assign(K, 
                        stan::model::cons_list(stan::model::index_uni(N), stan::model::cons_list(stan::model::index_uni(N), stan::model::nil_index_list())), 
                        ((1 / lambda) + delta), 
                        "assigning variable K");
            current_statement_begin__ = 70;
            stan::math::assign(L, cholesky_decompose(K));
            current_statement_begin__ = 72;
            stan::math::assign(f, multiply(multiply(L, tau), transpose(diag_pre_multiply(alpha, L_Omega))));
            current_statement_begin__ = 74;
            lp_accum__.add(beta_log<propto__>(rho, 1.0, 0.4));
            current_statement_begin__ = 75;
            lp_accum__.add(gamma_log<propto__>(lambda, 5, 5));
            current_statement_begin__ = 77;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(std_normal_log<propto__>(to_vector(tau)));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(to_vector(z), to_vector(f), sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("tf");
        names__.push_back("y_pred");
        names__.push_back("L_Omega");
        names__.push_back("tau");
        names__.push_back("rho");
        names__.push_back("lambda");
        names__.push_back("beta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bc_with_pred_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, 1, Eigen::Dynamic> tf = in__.row_vector_lub_constrain(0, 1, q);
        size_t tf_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < tf_j_1_max__; ++j_1__) {
            vars__.push_back(tf(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> y_pred = in__.matrix_constrain(n_pred, D);
        size_t y_pred_j_2_max__ = D;
        size_t y_pred_j_1_max__ = n_pred;
        for (size_t j_2__ = 0; j_2__ < y_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
                vars__.push_back(y_pred(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega = in__.cholesky_factor_corr_constrain(D);
        size_t L_Omega_j_2_max__ = D;
        size_t L_Omega_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> tau = in__.matrix_constrain(N, D);
        size_t tau_j_2_max__ = D;
        size_t tau_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < tau_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                vars__.push_back(tau(j_1__, j_2__));
            }
        }
        double rho = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(rho);
        double lambda = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 39;
            double beta;
            (void) beta;  // dummy to suppress unused var warning
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,(-(4.0) * stan::math::log(rho)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(beta);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_bc_with_pred";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t tf_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < tf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_j_2_max__ = D;
        size_t y_pred_j_1_max__ = n_pred;
        for (size_t j_2__ = 0; j_2__ < y_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_2_max__ = D;
        size_t L_Omega_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t tau_j_2_max__ = D;
        size_t tau_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < tau_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t tf_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < tf_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tf" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t y_pred_j_2_max__ = D;
        size_t y_pred_j_1_max__ = n_pred;
        for (size_t j_2__ = 0; j_2__ < y_pred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < y_pred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_1_max__ = ((D * (D - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_j_2_max__ = D;
        size_t tau_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < tau_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tau" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_bc_with_pred_namespace::model_bc_with_pred stan_model;
#endif
